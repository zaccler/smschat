// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.smsmessenger.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller;
import com.simplemobiletools.commons.views.MyAutoCompleteTextView;
import com.simplemobiletools.commons.views.MyFloatingActionButton;
import com.simplemobiletools.commons.views.MyRecyclerView;
import com.simplemobiletools.smsmessenger.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityThreadBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MyAutoCompleteTextView addContactOrNumber;

  @NonNull
  public final ImageView confirmInsertedNumber;

  @NonNull
  public final ImageView confirmManageContacts;

  @NonNull
  public final View messageDividerOne;

  @NonNull
  public final View messageDividerTwo;

  @NonNull
  public final LayoutThreadSendMessageHolderBinding messageHolder;

  @NonNull
  public final MyFloatingActionButton scrollToBottomFab;

  @NonNull
  public final LinearLayout selectedContacts;

  @NonNull
  public final LayoutInvalidShortCodeInfoBinding shortCodeHolder;

  @NonNull
  public final RelativeLayout threadAddContacts;

  @NonNull
  public final CoordinatorLayout threadCoordinator;

  @NonNull
  public final ConstraintLayout threadHolder;

  @NonNull
  public final RecyclerViewFastScroller threadMessagesFastscroller;

  @NonNull
  public final MyRecyclerView threadMessagesList;

  @NonNull
  public final MaterialToolbar threadToolbar;

  private ActivityThreadBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MyAutoCompleteTextView addContactOrNumber, @NonNull ImageView confirmInsertedNumber,
      @NonNull ImageView confirmManageContacts, @NonNull View messageDividerOne,
      @NonNull View messageDividerTwo, @NonNull LayoutThreadSendMessageHolderBinding messageHolder,
      @NonNull MyFloatingActionButton scrollToBottomFab, @NonNull LinearLayout selectedContacts,
      @NonNull LayoutInvalidShortCodeInfoBinding shortCodeHolder,
      @NonNull RelativeLayout threadAddContacts, @NonNull CoordinatorLayout threadCoordinator,
      @NonNull ConstraintLayout threadHolder,
      @NonNull RecyclerViewFastScroller threadMessagesFastscroller,
      @NonNull MyRecyclerView threadMessagesList, @NonNull MaterialToolbar threadToolbar) {
    this.rootView = rootView;
    this.addContactOrNumber = addContactOrNumber;
    this.confirmInsertedNumber = confirmInsertedNumber;
    this.confirmManageContacts = confirmManageContacts;
    this.messageDividerOne = messageDividerOne;
    this.messageDividerTwo = messageDividerTwo;
    this.messageHolder = messageHolder;
    this.scrollToBottomFab = scrollToBottomFab;
    this.selectedContacts = selectedContacts;
    this.shortCodeHolder = shortCodeHolder;
    this.threadAddContacts = threadAddContacts;
    this.threadCoordinator = threadCoordinator;
    this.threadHolder = threadHolder;
    this.threadMessagesFastscroller = threadMessagesFastscroller;
    this.threadMessagesList = threadMessagesList;
    this.threadToolbar = threadToolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityThreadBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityThreadBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_thread, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityThreadBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_contact_or_number;
      MyAutoCompleteTextView addContactOrNumber = ViewBindings.findChildViewById(rootView, id);
      if (addContactOrNumber == null) {
        break missingId;
      }

      id = R.id.confirm_inserted_number;
      ImageView confirmInsertedNumber = ViewBindings.findChildViewById(rootView, id);
      if (confirmInsertedNumber == null) {
        break missingId;
      }

      id = R.id.confirm_manage_contacts;
      ImageView confirmManageContacts = ViewBindings.findChildViewById(rootView, id);
      if (confirmManageContacts == null) {
        break missingId;
      }

      id = R.id.message_divider_one;
      View messageDividerOne = ViewBindings.findChildViewById(rootView, id);
      if (messageDividerOne == null) {
        break missingId;
      }

      id = R.id.message_divider_two;
      View messageDividerTwo = ViewBindings.findChildViewById(rootView, id);
      if (messageDividerTwo == null) {
        break missingId;
      }

      id = R.id.message_holder;
      View messageHolder = ViewBindings.findChildViewById(rootView, id);
      if (messageHolder == null) {
        break missingId;
      }
      LayoutThreadSendMessageHolderBinding binding_messageHolder = LayoutThreadSendMessageHolderBinding.bind(messageHolder);

      id = R.id.scroll_to_bottom_fab;
      MyFloatingActionButton scrollToBottomFab = ViewBindings.findChildViewById(rootView, id);
      if (scrollToBottomFab == null) {
        break missingId;
      }

      id = R.id.selected_contacts;
      LinearLayout selectedContacts = ViewBindings.findChildViewById(rootView, id);
      if (selectedContacts == null) {
        break missingId;
      }

      id = R.id.short_code_holder;
      View shortCodeHolder = ViewBindings.findChildViewById(rootView, id);
      if (shortCodeHolder == null) {
        break missingId;
      }
      LayoutInvalidShortCodeInfoBinding binding_shortCodeHolder = LayoutInvalidShortCodeInfoBinding.bind(shortCodeHolder);

      id = R.id.thread_add_contacts;
      RelativeLayout threadAddContacts = ViewBindings.findChildViewById(rootView, id);
      if (threadAddContacts == null) {
        break missingId;
      }

      CoordinatorLayout threadCoordinator = (CoordinatorLayout) rootView;

      id = R.id.thread_holder;
      ConstraintLayout threadHolder = ViewBindings.findChildViewById(rootView, id);
      if (threadHolder == null) {
        break missingId;
      }

      id = R.id.thread_messages_fastscroller;
      RecyclerViewFastScroller threadMessagesFastscroller = ViewBindings.findChildViewById(rootView, id);
      if (threadMessagesFastscroller == null) {
        break missingId;
      }

      id = R.id.thread_messages_list;
      MyRecyclerView threadMessagesList = ViewBindings.findChildViewById(rootView, id);
      if (threadMessagesList == null) {
        break missingId;
      }

      id = R.id.thread_toolbar;
      MaterialToolbar threadToolbar = ViewBindings.findChildViewById(rootView, id);
      if (threadToolbar == null) {
        break missingId;
      }

      return new ActivityThreadBinding((CoordinatorLayout) rootView, addContactOrNumber,
          confirmInsertedNumber, confirmManageContacts, messageDividerOne, messageDividerTwo,
          binding_messageHolder, scrollToBottomFab, selectedContacts, binding_shortCodeHolder,
          threadAddContacts, threadCoordinator, threadHolder, threadMessagesFastscroller,
          threadMessagesList, threadToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
