// Generated by view binder compiler. Do not edit!
package com.simplemobiletools.smsmessenger.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.simplemobiletools.smsmessenger.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemMessageBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout threadMessageAttachmentsHolder;

  @NonNull
  public final AppCompatTextView threadMessageBody;

  @NonNull
  public final ConstraintLayout threadMessageHolder;

  @NonNull
  public final ImageView threadMessagePlayOutline;

  @NonNull
  public final ImageView threadMessageSenderPhoto;

  @NonNull
  public final RelativeLayout threadMessageWrapper;

  private ItemMessageBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout threadMessageAttachmentsHolder,
      @NonNull AppCompatTextView threadMessageBody, @NonNull ConstraintLayout threadMessageHolder,
      @NonNull ImageView threadMessagePlayOutline, @NonNull ImageView threadMessageSenderPhoto,
      @NonNull RelativeLayout threadMessageWrapper) {
    this.rootView = rootView;
    this.threadMessageAttachmentsHolder = threadMessageAttachmentsHolder;
    this.threadMessageBody = threadMessageBody;
    this.threadMessageHolder = threadMessageHolder;
    this.threadMessagePlayOutline = threadMessagePlayOutline;
    this.threadMessageSenderPhoto = threadMessageSenderPhoto;
    this.threadMessageWrapper = threadMessageWrapper;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemMessageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemMessageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_message, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemMessageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.thread_message_attachments_holder;
      LinearLayout threadMessageAttachmentsHolder = ViewBindings.findChildViewById(rootView, id);
      if (threadMessageAttachmentsHolder == null) {
        break missingId;
      }

      id = R.id.thread_message_body;
      AppCompatTextView threadMessageBody = ViewBindings.findChildViewById(rootView, id);
      if (threadMessageBody == null) {
        break missingId;
      }

      ConstraintLayout threadMessageHolder = (ConstraintLayout) rootView;

      id = R.id.thread_message_play_outline;
      ImageView threadMessagePlayOutline = ViewBindings.findChildViewById(rootView, id);
      if (threadMessagePlayOutline == null) {
        break missingId;
      }

      id = R.id.thread_message_sender_photo;
      ImageView threadMessageSenderPhoto = ViewBindings.findChildViewById(rootView, id);
      if (threadMessageSenderPhoto == null) {
        break missingId;
      }

      id = R.id.thread_message_wrapper;
      RelativeLayout threadMessageWrapper = ViewBindings.findChildViewById(rootView, id);
      if (threadMessageWrapper == null) {
        break missingId;
      }

      return new ItemMessageBinding((ConstraintLayout) rootView, threadMessageAttachmentsHolder,
          threadMessageBody, threadMessageHolder, threadMessagePlayOutline,
          threadMessageSenderPhoto, threadMessageWrapper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
